#!/usr/bin/python
import sys;
import os;
scriptsDir = os.environ.get("UTIL_SCRIPTS_DIR");
if (scriptsDir is None):
	raise Exception("Please set environment variable UTIL_SCRIPTS_DIR");
import pathSetter;
import argparse;
import util;
import fileProcessing as fp;

#def gene object
#has a dictionary of 'valName' --> val.

#dictionary
#gene id --> gene object

#use the 'read into dictionary' action.
#next action would be to extract the gene id:
# if the gene id is not in the main gene dict, create it
# {to the gene in the main gene dict, add the data for each timepoint. Use the names from the title.
# also create a new score (with specified name) using some function.} <-- this is the function that is generated by some helper function.

#once you have that, party!

CONFIG_ATTR = enum(
    INPUT_FILE = 'inputFile'
    , VALUE_COLUMNS_TO_STORE = 'valueColumnsToStore'
    , SIGNED_LOG_PVAL_METASCORES = 'signedLogPvalMetascores'
    , GENE_ID_COLUMN = 'geneIdColumn'
    );
VALUE_COLUMNS_TO_STORE_ATTR = enum(
    VALUE_NAME = 'valueName'
    , COLUMN_NAME = 'columnName'
    , TYPE = 'type'
);
SIGNED_LOG_PVAL_METASCORES_ATTR = enum(
    SCORE_NAME = 'scoreName'
    , PVAL_FOLDCHANGE_PAIRS = 'pvalFoldChangePairs'
);
PVAL_FOLD_CHANGE_PAIRS_ATTR = enum(
    PVAL_NAME = 'pvalName'
    , FC_COL_NAME = 'fcColName'
    , INVERT_SIGN = 'invertSign'
    , PVAL_IS_LOG = 'pvalIsLog'
    , FC_IS_LOG = 'fcIsLog'
);


def main():
    parser = argparse.ArgumentParser(description="read in the lee lab files in preparation for statistical tests");
    parser.add_argument("--inputConfigs", nargs="+");
    args = parser.parse_args();
    
    processInput(args);    

def processInput(args):
    geneDictionary = {};
    for inputConfig in args.inputConfigs:
        configJson = util.parseJsonFile(inputConfig);
        validateConfigJson(configJson);
        inputFile = configJson[CONFIG_ATTR.INPUT_FILE];
        geneIdColumn = configJson[CONFIG_ATTR.GENE_ID_COLUMN];    
        valueColumnsToStore = configJson[CONFIG_ATTR.VALUE_COLUMNS_TO_STORE];
        signedLogPvalMetascores = configJson[CONFIG_ATTR.SIGNED_LOG_PVAL_METASCORES];

        def actionOnDictionary(inp,i):
            geneId = inp[geneIdColumn];
            if geneId not in geneDictionary:
                geneDictionary[geneId] = util.Entity(geneId);
            theGene = geneDictionary[geneId];
            for valueColumnToStore in valueColumnsToStore:
                theType = valueColumnToStore[VALUE_COLUMNS_TO_STORE_ATTR.TYPE];
                theVal = inp[valueColumnToStore[VALUE_COLUMNS_TO_STORE_ATTR.COLUMN_NAME]];
                theGene.addAttribute(
                    valueColumnToStore[VALUE_COLUMNS_TO_STORE_ATTR.VALUE_NAME]
                    , theVal if theType is None else util.transformType(theVal, theType)
                );
            for signedLogPvalMetascore in signedLogPvalMetascores:
                metascoreName = signedLogPvalMetascores[SIGNED_LOG_PVAL_METASCORES_ATTR.SCORE_NAME];
                pvalFoldChangePairs = signedLogPvalMetascores[SIGNED_LOG_PVAL_METASCORES_ATTR.PVAL_FOLDCHANGE_PAIRS];
                metascore = 0;
                for pvalFoldChangePair in pvalFoldChangePairs:
                    pvalName = pvalFoldChangePair[PVAL_FOLD_CHANGE_PAIRS_ATTR.PVAL_NAME];
                    fcColName = pvalFoldChangePair[PVAL_FOLD_CHANGE_PAIRS_ATTR.FC_COL_NAME];
                    invertSign = pvalFoldChangePair[PVAL_FOLD_CHANGE_PAIRS_ATTR.INVERT_SIGN];
                    pvalIsLog = pvalFoldChangePair[PVAL_FOLD_CHANGE_PAIRS_ATTR.PVAL_IS_LOG];
                    fcIsLog = pvalFoldChangePair[PVAL_FOLD_CHANGE_PAIRS_ATTR.FC_IS_LOG];
                    invertSign = False if invertSign is None else invertSign;
                    pvalIsLog = True if pvalIsLog is None else pvalIsLog;
                    fcIsLog = True if fcIsLog is None else fcIsLog;
                    

                    signedLogPval = theGene.getAttribute(pvalName);
                    signedLogPval = abs(math.log(signedLogPval) if fcIsLog == False else signedLogPval);
                    fcThreshold = 0 if fcIsLog else -1;
                    signedLogPval = signedLogPval if theGene.getAttribute(fcColName) >= fcThreshold else -1*signedLogPval;
                    signedLogPval = signedLogPval if invertSign == False else -1*signedLogPval;
                    metascore += signedLogPval;
                theGene.addAttribute(metascoreName, metascore);

       def actionFromTitle(title):
           dictionaryFromLine = fp.lambdaMaker_dictionaryFromLine(title);
           return util.chainFunctions(dictionaryFromLine, actionOnDictionary);  

       fp.performActionOnEachLineOfFile(actionFromTitle=actionFromTitle);

    return geneDictionary;

def validateConfigJson(configJson):
   util.checkForAttributes(configJson,
        [CONFIG_ATTR.INPUT_FILE
        , CONFIG_ATTR.VALUE_COLUMNS_TO_STORE
        , CONFIG_ATTR.SIGNED_LOG_PVAL_METASCORES
        , CONFIG_ATTR.GENE_ID_COLUMN
        ]); 

main();
